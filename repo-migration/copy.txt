param(
    [Parameter(Mandatory=$true)] [string]$TfsUrl,
    [Parameter(Mandatory=$true)] [string]$GitHubOrg,
    [Parameter(Mandatory=$true)] [string]$JsonFilePath
)

# Read tokens from environment variables
$TfsToken = $env:TFS_TOKEN
$GitHubToken = $env:GITHUB_TOKEN

if (-not $TfsToken) { throw "TFS_TOKEN is not set in environment variables." }
if (-not $GitHubToken) { throw "GITHUB_TOKEN is not set in environment variables." }

# Define working directory
$workingDir = Join-Path -Path $PWD -ChildPath "repo"

Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Migration script started."
Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Input JSON file: $JsonFilePath"
Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - TFS URL: $TfsUrl"
Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - GitHub Org: $GitHubOrg"

# Read and parse JSON file
Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Reading and parsing JSON input - START"
if (-not (Test-Path $JsonFilePath)) {
    throw "JSON file $JsonFilePath not found."
}
$jsonContent = Get-Content -Raw -Path $JsonFilePath | ConvertFrom-Json
Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Reading and parsing JSON input - END"

foreach ($project in $jsonContent.projects) {
    $projectName = $project.projectName
    Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Processing project: $projectName - START"

    foreach ($repo in $project.repositories) {
        $repoName = $repo.name
        $repoType = $repo.type.ToUpper()
        $tfvcPath = "$/$projectName/$repoName"

        Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Processing repository: $repoName of type $repoType - START"

        $localRepoPath = Join-Path -Path $workingDir -ChildPath $repoName

        # Step 1: Create GitHub repo via API
        Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Creating GitHub repository: $repoName - START"

        $createRepoUri = "https://api.github.com/orgs/$GitHubOrg/repos"
        $repoBody = @{
            name = $repoName
            private = $true
            auto_init = $false
        } | ConvertTo-Json

        $headers = @{
            Authorization = "token $GitHubToken"
            Accept = "application/vnd.github.v3+json"
            "User-Agent" = "PowerShell-Script"
        }

        try {
            $response = Invoke-RestMethod -Uri $createRepoUri -Method Post -Headers $headers -Body $repoBody
            Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - GitHub repository $repoName created successfully"
        } catch {
            Write-Warning "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Failed to create GitHub repository: $repoName. Error: $_"
            continue
        }

        Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Creating GitHub repository: $repoName - END"

        if ($repoType -eq "TFVC") {
            Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Cloning TFVC repository $tfvcPath using git-tfs - START"

            if (Test-Path $localRepoPath) {
                Remove-Item -Recurse -Force -Path $localRepoPath
            }

            $cloneCmd = "git tfs clone --username user --password $TfsToken $TfsUrl $tfvcPath $localRepoPath"
            Write-Host "Running command: $cloneCmd"
            $cloneResult = & git tfs clone --username user --password $TfsToken $TfsUrl $tfvcPath $localRepoPath

            if ($LASTEXITCODE -ne 0) {
                Write-Warning "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - git-tfs clone failed for repository $repoName"
                continue
            }

            Set-Location -Path $localRepoPath
            git remote add origin "https://$GitHubToken@github.com/$GitHubOrg/$repoName.git"
            git push origin --all
            git push origin --tags
            Set-Location -Path $workingDir

            Remove-Item -Recurse -Force -Path $localRepoPath
            Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Deleted local repository directory: $localRepoPath"

            Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Cloning TFVC repository $tfvcPath using git-tfs - END"
        }
        elseif ($repoType -eq "GIT") {
            Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Git repository migration is not yet implemented for: $repoName"
        }
        else {
            Write-Warning "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Unknown repository type '$repoType' for repository $repoName"
        }

        Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Processing repository: $repoName of type $repoType - END"
    }

    Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Processing project: $projectName - END"
}

Write-Host "$(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') - Migration script completed."
